// This file was generated by Mendix Modeler.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package mxutils.actions;

import com.mendix.core.Core;
import com.mendix.logging.ILogNode;
import com.mendix.systemwideinterfaces.connectionbus.data.IDataRow;
import com.mendix.systemwideinterfaces.connectionbus.data.IDataTable;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import mxutils.proxies.DataPoint;
import mxutils.proxies.MultiSeriesChart;
import mxutils.proxies.MultiSeriesDataset;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;

public class OQLChartDataset extends CustomJavaAction<IMendixObject>
{
	private String OQL;
	private IMendixObject ChartSeriesResultObject;

	public OQLChartDataset(IContext context, String OQL, IMendixObject ChartSeriesResultObject)
	{
		super(context);
		this.OQL = OQL;
		this.ChartSeriesResultObject = ChartSeriesResultObject;
	}

	@Override
	public IMendixObject executeAction() throws Exception
	{
		// BEGIN USER CODE
        ILogNode logger = Core.getLogger(OQLChartDataset.class.getName());
        logger.info("> executeAction");
        IDataTable dataTable = Core.retrieveOQLDataTable(getContext(), this.OQL);
        MultiSeriesChart chart = MultiSeriesChart.initialize(getContext(), ChartSeriesResultObject);
        Iterator<IDataRow> iter = dataTable.iterator();
        HashMap<String, MultiSeriesDataset> datasetMap = new HashMap<String, MultiSeriesDataset>();
        int i = 0;
        while (iter.hasNext()) {
            IDataRow row = iter.next();
            if (i==0){
                chart.setName(row.getValue(getContext(), "chartname"));
                chart.setCreationDate(new Date());
            }
            String label = row.getValue(getContext(), "label");
            if (!datasetMap.containsKey(label)) {
                MultiSeriesDataset ds = new MultiSeriesDataset(getContext());
                ds.setLabel(label);
                ds.setColor(row.getValue(getContext(), "color"));
                Long sortingValue = row.getValue(getContext(), "sortingvalue");
                ds.setSortingValue(sortingValue.intValue());
                datasetMap.put(label, ds);
                List<MultiSeriesDataset> lds =  chart.getMultiSeriesChart_MultiSeriesDataset(getContext());
                lds.add(ds);
                chart.setMultiSeriesChart_MultiSeriesDataset(getContext(),lds);
            }
            logger.debug(String.format("Row: %s, %s, %tY-%<tm-%<td %<tH:%<tM, %f, %s, %s, %d",
                    row.getValue(getContext(), "chartname"),
                    row.getValue(getContext(), "xlabel"),
                    row.getValue(getContext(), "xvalue"),
                    row.getValue(getContext(), "yvalue"),
                    row.getValue(getContext(), "label"),
                    row.getValue(getContext(), "color"),
                    row.getValue(getContext(), "sortingvalue")
            ));

            MultiSeriesDataset ds = datasetMap.get(row.getValue(getContext(), "label"));
            DataPoint dp = new DataPoint(getContext());
            dp.setyvalue(getContext(), row.getValue(getContext(), "yvalue"));
            dp.setxvalue(getContext(), row.getValue(getContext(), "xlabel"));
            dp.setxsortingvalue(getContext(), row.getValue(getContext(), "xvalue"));
            List<DataPoint> ldp = ds.getMultiSeriesDataset_DataPoint(getContext());
            ldp.add(dp);
            ds.setMultiSeriesDataset_DataPoint(getContext(),ldp);
            i++;
        }
        logger.info(String.format("Done creating charting dataseries, no rows found: %d",i));
        logger.info("< executeAction");
        return chart.getMendixObject();
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@Override
	public String toString()
	{
		return "OQLChartDataset";
	}

	// BEGIN EXTRA CODE
	// END EXTRA CODE
}
